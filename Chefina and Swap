You are given a positive integer N. Consider the sequence S=(1,2,…,N). You should choose two elements of this sequence and swap them.

A swap is nice if there is an integer M (1≤M<N) such that the sum of the first M elements of the resulting sequence is equal to the sum of its last N−M elements. Find the number of nice swaps.


/////////////////////////////////////////////////Naive Approach /////////////////////////////////////////////////
/* package codechef; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Codechef
{
    //contigious sumFunction to calculate 
    static void contSum (int sum[],int arr[], int n){
        sum[0] =arr[0];
        for (int i=1; i<n;i++){
            sum[i] = arr[i]+sum[i-1];
        }
    }
	public static void main (String[] args) throws java.lang.Exception
	{
		// your code goes here
		Scanner sc = new Scanner (System.in);
		int t = sc.nextInt();
		while(t-->0){
		    int n = sc.nextInt();
		    int arr[] = new int[n];
		    //storing cont no. in array
		    for (int i=0;i<n;i++){
		        arr[i] = i+1;
		    }
		    
		    int sum[] = new int[n];

		    int ans=0;
		    for (int i=0;i<n;i++){
		        for (int j=i+1;j<n;j++){
		            //swapping each and every element
		            int temp = arr[i];
		            arr[i] = arr[j];
		            arr[j] = temp;
		            
		            contSum(sum,arr,n);
		            
		            for (int k=n-2;k>=0;k--){
		                if (sum[n-1]-sum[k] == sum[k]){
		                    ans++;
		                }
		            }
		            
		            arr[j] = arr[i];
		            arr[i] = temp;
		            
		            
		        }
		    }
		    System.out.println(ans);
		    
		}
	}
}
